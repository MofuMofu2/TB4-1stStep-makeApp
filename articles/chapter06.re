= レビューとマサカリと態度が悪いマン

2018年の1月に、こんな記事がfireしていました。

コードレビューにおけるレビュアー側のアンチパターン – ITアーキテクトブログ – Medium
（@<href>{https://medium.com/@laqiiz/コードレビューにおけるレビュアー側のアンチパターン-effdcc39da5}）

この記事に対するはてなブックマークのコメント欄が阿鼻叫喚な感じになっていて、また味が出ているエモポエムです。

記事を要約すると、

 * ひよこエンジニアの人が多くいる現場でコードレビューをすることになった。
 * コードはGit管理で、コードレビューはGitHub上で行う。
 * レビュー時に「これはよくないな」というアンチパターンが多発し、反省のために記事を書いた。
 ** 具体的な修正方法を出さないレビューコメントが多く、ひよこエンジニアが疲弊した。
 ** 修正を反映したら、それに紐づく修正が雪だるま式に出てきて終わりが見えなくなった。
 ** 「XXを読んで勉強してよ」と、修正内容を自分で察してください感を出していた。
 ** そもそもレビューされていないものもmasterブランチにMergeしてしまっていた。

と、まあよくあるコードレビューのアンチパターン集に関するポエムなのでした。

なぜfireしたのか？それは、コードレビューはする側（レビュアー）・される側（レビュイー）共に嫌な気持ちになることが多く、
これ系の記事自体が燃焼要素満載だからです。

ブログをちょっと書いただけでfireするのです。現実は？もっと嫌な気持ちになることも多いです。
なので、なるべく先人の知恵をエモポエムから吸収して、少しでも気持ちが良いレビューフローをやっていきましょう。
合わせて、マサカリ・態度が悪いマンに関するポエムを紹介します。この辺り、心にトゲパワワが溜まる原因となりますからね。
サバイバルするには重要な知見になると思っています。

== なぜレビュー論争がおこるのか？

これには原因がいくつかあると思うのですが、レビュアーとレビュイーの技術スキルが異なるんだよ、という前提が
頭から転げ落ちているときに不幸になる率が高いのでは？と予想しています。
これに拍車をかけるのが、「間違っていることは全部指摘して直してもらうべきだ」という考え方です。
仕事ならまだしも、個人で書いているブログでもこの問題は頻発します。

=== レビューを受ける側の気持ち

指摘を受けると、ぐさっときて落ち込んでしまいますよね。もっと優しくしてほしい！という側の主張です。

 * エンジニアから飛んでくるマサカリを受け止める心得
 （@<href>{https://www.slideshare.net/re_3_19/ss-34793007}）
 * 不寛容社会とエンジニアの「正しさハラスメント」
 （@<href>{http://emokuaritai.hatenablog.jp/entry/2016/12/28/115401}）


=== レビューをする側の気持ち

間違っているんだから直すべきだし、ブログは永遠に残り続けるのでなおさら修正するべきだ、とする側の主張です。

 * ITエンジニアが誤った情報にツッコミを入れるのは「正しさハラスメント」ではない
 （@<href>{http://blog.jnito.com/entry/2016/12/29/102416}）
 * 「正しさ」ハラスメントの元記事を読んで、マサカリ大好き人間が思ったこと
 （@<href>{https://qiita.com/emadurandal/items/00119bb88fd213c5bf25}）

=== この論争をなくすことは難しい

レビュイー側は「頑張って成果物を作った/記事を書いたのに、自分よりも詳しい人がボコボコに叩いてくるので辛い。そんなの分かるわけないじゃん！」って気持ちなのです。
しかし、レビュアー側は「技術的に間違っているのだから修正しなければならない、相手を気にして不具合を放っておくのは全体としてよくないことだ」と考えています。
この2つの異なる考え、そもそも平和的に解決することは難しいのです。

お互いに立場・知識・コンテキストが違うということが念頭にない限り、戦いは続きます。歩み寄って〜みたいな気持ちですが、なかなか実現しないんですね。

== 優しい世界を目指すために

どうすればもっと優しい世界ができるのでしょうか？
そのヒントになるエモポエムを見つけたので、紹介します。

=== コードレビューを受けるのがつらくなったときは

@<href>{http://c5meru.hatenablog.jp/entry/2017/11/10/235107}

このポエムも他のポエムを多く引用しています。引用元も合わせて読むことをおすすめします。

 * レビュイーは不明点をレビュアーにきちんと伝える
 * レビュアーは「この文章はレビュイーが読んでも理解できるのか？」を念頭に置いてレビューする
 * ただの文章は放っておくと攻撃的に見える。絵文字や画像で"めでたく"盛り上げて優しさを出していく。

これらを実施すれば、少しは争いが減るのでは？と主張されています。
言われてみると、文章で「Aは間違っているので修正してください」と書かれると「怒ってるのかな…」という気持ちになりますね。
「AのままだとXXの不具合が出てしまい、よくないと思います。Bの方が不具合がでないと思うのですがどうでしょうか？」と言ってもらえれば
「なるほどな」と素直に受け止めることができます。

人格を攻撃している、と受け取られないようなコメントをすることが、レビューを気持ちよく進める際に重要になるのでは？ともふちゃんは思います。

=== 「プログラマの三大美徳」と「HRT」を使い分ける - 「コードを憎んで人を憎まず」

@<href>{http://t-and-p.hatenablog.com/entry/2017/01/03/「プログラマの三大美徳」と「HRT」を使い分ける_-_}


レビューが優しい世界はDroidKaigiの公式アプリを開発するプロジェクト（@<href>{https://github.com/DroidKaigi/conference-app-2018/issues}）で
閲覧することができます。知らない人同士が楽しく開発しており、揉め事的なものも見当たりません。こんなプロジェクトを目指してやっていきたいものです。

批判の受け止め方（@<href>{http://blog.practical-scheme.net/shiro/20161228-feedback}）
