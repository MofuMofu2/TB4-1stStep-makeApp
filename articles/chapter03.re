= Qiitaのエモいポエム編

もふもふちゃんのポエムばかりやんけい！と思った方、いよいよここからが本編です。

まずはブログ（@<href>{http://rimarimadan.hatenablog.com}）にも載せているQiitaのエモいポエムを集めてみました。
しかしまあ、掘れば掘るほどポエムは出てきますね。すごいね。

Qiitaで@<code>{新人エンジニア応援}タグかついて投稿されてる記事を読んでいきましょう。
一歩間違えれば炎上しそうなものから、知見の金塊のようなものまでよりどりみどりです。これだからエモポエムは面白い。


== 猫からみたオブジェクト指向プログラミング

@<href>{https://qiita.com/s_yuche/items/d46c7c843a56e6b2ebb7}


//quote{
	遍く全てのOOPが使えるようになる。マジだぜ。20-30分くらいで眺められるように頑張る。
//}

かは保証できませんし、OOPのこと1行くらいしか説明してなくね？みたいな気持ちにはなります。
が、このポエムの良いところは比喩の説明を信頼するな、というところが強調されているところです。

//quote{
	鯛焼きと鯛焼き機の話は窓から放り捨てろ

	少なくとも『10日でわかるJava』みたいなのはやめろ。もう買っちゃったなら、窓から放り捨てろ。"変数は箱のようなものである"は、嘘だ。嘘が書いてある本を読むと、余計にわからなくなる。

//}


例えはただの例えであって、実際のコンピューターの動作とは異なりますよね。
最初は比喩の理解でも良いかもしれません。しかし、それで本当に概念を理解した、と言えるのでしょうか？
もふちゃんは@<code>{なんとなく理解したつもり}は何も理解してないのと同じ意味だと思っています。すごく無責任な態度ですし、
原稿を書くには言葉の定義は正しく説明できないとだめだなと考えています。

このポエムのいいところその2は、きちんとここを見てね、と信頼性の高い情報を参照するように指示してるのが良いですね。
ひよこエンジニアの人は「勉強したいのに、どんなコンテンツを参照すれば良いのかわからない」状態になることが多いです。
たくさんコンテンツへのリンクが貼られているのでとても親切ですね。

でも、ねこさん？はOOPのこと比喩で説明してる気がする…きのせい？

== プログラミング勉強を加速させる7つの習慣

@<href>{https://qiita.com/YudaiTsukamoto/items/42a8df22ca4c6b327dfd}

これは傑作ポエムだと個人的には思っています。初学者のあるあるハマりどころをきちんと押さえているのと、的確な対策。マジエンジニアって感じです。

//quote{
	初心者の人や新しい分野の勉強を始める人が陥りやすい事は、
	そもそも何を勉強するべきなのかの全体像がつかめず、学習が続かなくなってしまう事なのではないでしょうか。
//}

この文章を初めて読んだとき、首が折れるくらい「わかる〜〜〜〜〜」と頷いてしまいました。
本編でも触れられていますが、最初は学習範囲を絞るっていう作戦はひよこエンジニアにとっては生命線とも言える考え方です。
技術の世界って広くて深いじゃないですか。全部極めるのは無理なんですよ。しかし、ひよこな我々は「あれもこれもそれもやらな〜〜〜〜〜〜」って思ってしまうのです。
そんな不安に対して、このブログの筆者さんは

//quote{
	またプログラミングの世界は分野が違っていても通じる考え方や原理原則が多数存在し、
	一つの分野をある程度深いレベルまで学習することで他の分野を学習するときの手助けになることも多いため、トータルで効率的に勉強を進めることが出来ます。
//}

と、なぜ範囲を絞ることが重要なのかを解説しています。

もふちゃんも今まで（今年入るまで）はインフラエンジニアな仕事をしていました。プログラミングは新卒研修で3ヶ月やったくらいです。しかもわからなさすぎて全てねんねしてました。
最近関わっている仕事でJava・SQLやPythonを利用することになったので、今年の3月ごろに必死こいて勉強を始めたんですよ。
新卒のもふちゃんは動作しないプログラムが出てくると「はい〜もう無理」と諦めてしまっていました。しかし、今のもふちゃんは動作しないプログラムに対して仮説や今後の対応方法を考えて、
必要であれば自分で調べることができます。その結果、新卒のときのもふちゃんよりもプログラムが書けるようになりました。配列とかやっと理解したわ〜って感じです。

なので、ジャンルが違っていても、考え方や調べ方は一緒なのだと思います。1つ得意なジャンルをつくって、そこからできる！の輪を広げていくと良いでしょう。

あと、この記事のすごく好きなところを挙げます。

//quote{
	様々な解釈があると思いますが、私は勉強した内容を真に「理解した」とする基準を、
	学習した内容を1から10まで説明出来る
	として設けています。
//}

最近新卒なひよこエンジニアの人をよく観測するのですが、プログラムが書けた！と思っていても、よくよく聞いてみたら
「なんかこうしろって書いてあったから」というように、自分の成果物の内容を説明できない人が多くいます。
テストの解き方！Aって問題に書かれていたらBって書くぞ！というイメージです。

もふちゃんはこれが一番やばいと思っています。

その場では、仕事が早く終わった感が出て良い気分になるかもしれません。しかし、次のような場面で対応できるでしょうか？

 * トラブルになったときに、成果物の意図を説明する事ができるか？
 * 成果物の内容を説明するドキュメントを作成できるか？
 * 仕様が変更されたときに対処できるか？

コピペなエンジニアだと、これらの場面で撃墜されるのでは？ともふちゃんは思っています。実際に何名か観測もしました。
さらに言うと、普段のレビュー（Pull Request時などでしょうか）時に「なんでこうしたの？」と質問されても
回答できませんよね。コピペなエンジニアは信頼を失います。技術力がないと見なされるのです。

だから、この@<code>{学習した内容を1から10まで説明出来る}が頭にあるだけで一歩抜きん出たひよこエンジニアになれる！ともふちゃんは思っています。
時間がかかっても良いんです。成果物の全てに責任をとる！この気持ちがあればぐーんと伸びていきます。同人誌も書けるようになるぞ！

== ロシアの天才ハッカーによる【新人エンジニアサバイバルガイド】

@<href>{ https://qiita.com/jacksuzuki/items/b2fa6b44962e73a53d08}

凄い人は考えも凄いし端的でかっこいいですね。

文章から滲み出る姿勢や、まさにフルスタックな知見…いやほんとすげーなみたいな気持ちです。
すごい人と自分は違う、と思うかもしれません。しかし、良い習慣を参考にして取り入れることは可能なはずです。
たとえば、もふちゃんは次の文章を読んで考え方を真似しています。

//quote{
6.開発者と一緒に仕事をしよう。彼らが何をしたがってるのか理解するよう努めよう。
よりよいソリューションの布教活動をしよう。例えば、キューワーカーモデル、
非同期IO、中央レポジトリとフォワーダーによる非同期ロギング、自動化デプロイ、オートスケーリングなどだ。
//}

@<code>{キューワーカーモデル、非同期IO、中央レポジトリとフォワーダーによる非同期ロギング、自動化デプロイ、オートスケーリング}を理解して
布教することは難しいですし、もふちゃんもわかっていない事がたくさんあります。正直中央レポジトリしかわからん。オートスケーリング？ELBってやつ？みたいな気持ちです。
ただ、チームは同じだけど立場やロール（例：エンジニアとそれ以外の人）が違う人と一緒に働くことは可能です。そこで見つけた課題を技術でぽん！と解決すると
かっこいいしみんなハッピーですよね。

また、技術の布教活動を積極的にする姿勢も取り入れる事ができます。

高みの存在の人であっても、真似をすることはできるということだ。エモい！

== エンジニアで稼ぐために大切な２０のコト

@<href>{https://qiita.com/kazukichi/items/7379b75fba2f90d3cf45}

コメント欄も含めてかなりの燃料度がある有名なポエムですね。

このポエムをみて思うことは、次の3つです。

 * 自分と違う意見をみたときに「その考えはダメだと思います！」って言うのはよろしくない
 * 成果が出ないのであれば、いかに良いものを作っても意味なくて、それは真理
 * エンジニア＝プログラマではないぞ！この意味で使ってくる人は自分の観測範囲しかものが見えてない人が多い気がする

あと、タグに@<code>{プログラミング教育}ってついているのは微妙だなと思った。完全にSEO対策感にあふれていますよね。

自分と違う意見を見たときに猛烈に否定しがちな人は気をつけた方が良いです。後の章にも出てきますが、物言いが悪い人はどんどん信頼を失っていきます。

== 【新人向け】入社して３年たった僕が後悔していることまとめ

@<href>{https://qiita.com/januaryCOM/items/07569baa0fc699c7766b}

こうやって失敗談を書き残しているのは良いと思います。比較するべきは他の人じゃなくて過去の自分です。

//quote{
	【その2】会社のやり方が全てだと思いこんでいた

//}

これはひよこエンジニアが陥りがちな罠だと思います。実際もふちゃんも2年目までは同じ考え方を持っていました。
この筆者のように「あ、外の世界の技術はめちゃくちゃすすんでる！やばい！」と思えれば良いのですが、悲しいかな世の中にはそうでない人もたくさんいます。
すると、視野が狭くなるので「アレ」な感じの人になってしまいます。

技術同人誌を読んで書くことで、新鮮な知見を取り入れていきましょう。（ステマ）

== エンジニアとして成長するために私がやっていること

@<href>{https://qiita.com/akatsuki174/items/22bcccc58e59d1f3eb79}

アウトプット駆動開発の塊みたいな記事です。めっちゃいいと思う！ここに技術同人誌も入れたらもう最高だと思う！

というのはさておき、アウトプットしようぜ！という記事は世の中にたくさん転がっています。
理由としては、主に次の3つが挙げられます。

 * 手を動かしてみて、初めて出てくる課題を解決することで知見を深める事ができる
 * 深めた知見を論理立てて説明することで、知見をさらに深める事ができる
 * 記事のネタを作るために色々調べる習慣がつく

記事を書いて公開することは、その内容について責任を持つことと同義です。内容に間違いがあれば、当然修正する必要があります。
正しさを担保するためには、色々調べて内容の正しさを証明するための準備が必要ですよね。

ということもあり、アウトプットはいいぞ！と皆は言うのです。技術同人誌もいいぞ！

== [未経験者が認識していなさそうなTIPS]{https://qiita.com/Nao9syu/items/0950527548a08ff9d8c9}

まずはじめに@<b>{Qiitaをみるのは男性ばかりじゃないぞ}と言いたい。男女問題はすぐ炎上するし、インターネットの世界にいつまでも魚拓として残り続けます。
みんなが気持ちよく過ごすためにも、この辺りは聖人感出していきましょう。

こう言う記事は先にも述べた通り、自分が「なるほど！」と思った意見を採用すれば良いと思います。

//quote{
	電子媒体ではなく、物理媒体（ノート、メモ帳など）に書く。
	その物理媒体は、家の鍵や財布と同じように扱い、紛失盗難しないように心がける。
	IDは全部書いてしまう。
	パスワードは全部は書かずに自分にだけわかる記号を混ぜる。
//}


この部分はコメント欄にもある通り、なるべくパスワード管理用ソフト使った方が安全だと思います。
暗号化を破られることよりも紙を落とす確率の方が高いですよね。さらに、紙に会社の情報が記載されていれば、落とした事自体がもうセキュリティ事故です。

と、言うわけでなるべくパスワード管理ソフトが利用できるなら使っていきましょう。


== 20代エンジニアの成長を阻む7つのパターン（まとめ記事）

@<href>{https://qiita.com/Akira-Isegawa/items/45eaceb6c4c4cb7ef70d}

失敗談からの方が知見をより得られる気がしますよね。自分の屍を乗り越えていけ！感があってもふちゃんは好きです。
気分が落ち込んでいるときに読むと精神衛生上よろしくないので、気分が普通のときに読むように心がけています。

//quote{
	専門家としての成果のみを追求し、仕事の目的を見失う。
	自分の仕事はここまでと自分で勝手に線を引いて、自分の守備範囲の中だけの作業だけやっていればいいと思う。
//}

自分の守備範囲で作業する人、たまに観測されます。ただ、こう言う人は技術的に優れていても「仕事頼みにくいし相談もしにくいな〜」となります。
結果、信頼感を失ってしまい、どんどん孤立していきます（目の前で観測した事がある）。なので、チームで動くぞ！の気持ちがあるととても良いと思います。
