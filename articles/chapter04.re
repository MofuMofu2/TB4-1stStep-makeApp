= 新人エンジニアにオススメ！な本、本当に読めるのか？

もふちゃんは本読むのも買うのも書くのも好きです。本を読む事自体が好きなのであって、決して自慢やマウントをしたいわけではありません。
でも、世の中には本を読んだ冊数や内容を自慢してくる人がいます。勝手にやってもらう分には構わないのですが、これをひよこエンジニアの人に
「おまえはひよこなんだからこれを読め！」と押し付けてくる人もいるのです。本人は親切心でやっているので、かなりタチが悪いですね。

考えてみてほしいのですが、ひよこな人と成長したエンジニアの人が同じ本を読んだときに、同じような理解ができると思いますか？もふちゃんは思いません。
それを棚に上げて本を読むことを強要するのは本当によくないと思います。

ってことで、本を進めている記事を読んでいきたいと思います。

== 未経験から4年働きながら、読んでよかった読み物

@<href>{https://qiita.com/Nao9syu/items/0bedec7a749ab2d8123a}

プログラマ・エンジニアとして参考になる本を探しているのであれば、あんまり参考にならないかな、という気持ちになります。
マネジメント系の本が多い印象ですね。

この記事で取り上げられている『なれる！SE』は会社のパイセンが好きな本だったな〜とか思いました。完全にどうでもいいね。

== 5年間コードを書き続けたエンジニアが、新人に読んでもらいたい11冊+αを紹介する

@<href>{https://employment.en-japan.com/engineerhub/entry/2016/12/27/110000}

こういう記事が「おしつけ」な記事だと思っています。本当に迷惑だぞ！

//quote{
	プログラミング言語やシステムの専門的な知識は後からでも勉強できます。
	一方で、さまざまな自己流の癖は時間が経つと身に染みついてしまい、指摘されても直すのが難しくなってしまいます。
	そのため、新人のときに良いお作法を勉強しておくことをおすすめします。
	あわせて、開発を行う際に関わる様々な基礎知識は知っていて損はありません。
	基礎知識を知っているからこそ、より良いシステムを提案・開発できるようになります。
//}

言いたいことはわかるし、間違ってもいないと思うんですよ。でも、おすすめしている本で@<code>{お作法}や@<code>{基礎知識}を
ひよこな人が身につけられるのか？と言われると？マークが頭に浮かびます。それにプログラマー系な本ばかり紹介されているしな〜みたいな気持ちです。

あとはてなブックマークコメントにもあるけど

//quote{
	なにこれ #rebuildfm ep169 聴いた後でも同じ記事書けんの?
//}

って気持ちになります。

いくつか「いやこれはオススメしたらあかんやろ」みたいな本（本が悪いと言っているわけではない）があるので記事を引用？します。

=== オススメされている本1：『達人プログラマー―システム開発の職人から名匠への道』

//quote{
	エンジニアが開発を行う際のノウハウが詰まったオールインワンな一冊。
	要件定義から保守フェーズまでの開発の流れ、開発者としての哲学、開発スタイルなどがまとめられています。
//}

テクノロジー系Potcast@<code>{Rebuild.fm}の169話@<code>{169: Your Blog Can Be Generated By Neural Networks (omo)}
（@<href>{https://rebuild.fm/169/}）でも話がありましたが、この本が書かれた時代は1990年代なんですよ。
その時代のノウハウを今のひよこたちが学んでどうするよ？と思います。

もふちゃんも読んでみましたが、「あーそれ今もう解決されてね？」みたいな気分になります。
昔の歴史に興味があって、かつエンジニア人生に慣れてきた後に読めば良いと思います。この本については後で詳しく取り上げます。

=== オススメされている本2：『Amazon Web Services実践入門』

//quote{
	AWS（Amazon Web Services）を個人開発でも仕事でも利用する機会は多いでしょう。
	この本では、数多くあるAWSのサービスの中で、利用頻度の高いものを取り上げているので、
	AWSを使う際にはきっと参考になるでしょう。
//}

なんでひよこエンジニアにいきなりAWSを勧めてしまうのか…。しかも個人で利用するとそこそこ良い値段しますからねAWSは。
ぼーっとしてると１ヶ月で6千円とかは軽く吹っ飛びます。

個人で開発サーバーが欲しかったらさくらインターネット（@<href>{https://www.sakura.ad.jp}）とかCloudGarage
（@<href>{https://cloudgarage.jp}）とか利用した方が良いです。AWSは通信料・利用料に応じて課金されますが、
サーバー貸しタイプであれば固定のお金を払うだけで借りることができますからね。個人で利用するなら財布の心配が少ない方が
精神衛生上よろしいわけです。

さらに言うと、AWSは機能のリリース・アップデートも早いので、本に書いてある知識がすぐ古くなるタイプのプロダクトです。
AWSについて詳しく知りたいのであれば、きちんと公式サイト（@<href>{https://aws.amazon.com/jp/}）から情報を取得するべきです。
AWS Summitやウェビナーの動画が多く公開されていますので、本を読むよりもそちらを参照した方が手っ取り早いです。

=== オススメされている本3:WEB+DB PRESS plusシリーズ「徹底攻略」

これと『Webサービス開発徹底攻略』（技術評論社）』が@<code>{最新技術の基礎知識を身につける}として紹介されていますが、
最新技術の情報を本から取得したいのであれば、『WEB+DB PRESS』を定期購読するべきなのでは？と思います。

というのも、@<code>{徹底攻略}系の冊子は『WEB+DB PRESS』の本編を再編集している本です。
寄稿された文章が書かれた日付よりも、当然時間が空いていますから、その間に情報がアップデートされている可能性が高いです。

それを@<code>{最新技術の基礎知識を身につける}のにおすすめ、と紹介できる理由がよくわからないな〜と思います。

記事のまとめを読みたいな〜と言う人には良いと思いますが、紹介の仕方がどうかな〜みたいな気持ちになります。

全体的にSEOとかアフィリエイト感が漂っていて、「本当に本をちゃんと読んだのか？」みたいな気持ちになる記事でした。

== 新人プログラマに正月休み中を使って読んでみてほしい技術書をセレクトしてみた。

@<href>{https://qiita.com/hirokidaichi/items/d30714f0698dcff1200f}

この記事を書いている方が書いた『エンジニアリング組織論への招待～不確実性に向き合う思考と組織のリファクタリング』は面白かったです！
…じゃなくて、これも本の紹介記事ですね。Qiitaのいいね数がものすごい感じになっています。

まあ、お正月はのんびりしたって良いと思います。あと、全体的にひよこな人が読むと「は〜もうおなかいっぱい」みたいに思う本が多いですね。
本当の初学者であれば、別の本を参考にしないと心が折れそうな本リストです。

ただ、この記事の良いところは「自分の書いた記事はこの本を参照して書かれたものです」と明確に記載がある点です。
ブログの正当性の裏付けにもなりますし、ブログを書くのにもたくさんの本を読んでるんだな〜という良い習慣としての参考にもなります。

ひよこな人にはきついけれど、ひよこからステップアップしたい人には良い記事だなと思いました。

== 【2017年8月】先輩エンジニアに聞いた信頼できる書籍まとめ

@<href>{https://qiita.com/maimax/items/c5ac541be1d475c012cf#ビジネスマンの必読書-}

ちゃんと「どんな人に集計をとったか」を記載しているところには好感を持てますね。
職種によっても参考にするべき情報が異なるはずなので、その辺りのコンテキストを読み取らないと
「こんな本参考にならんわ」という気持ちになってしまいます。

この記事を書いた人は全冊読んでいるわけではなさそうだな、とは思いました。
ひよこな人が読んだときの感想も添えてあげると、ひよこな人におすすめしても良いものか
判断しやすいのではないでしょうか。

== 独断と偏見で選ぶ、新人Rubyプログラマの為の技術書21選

@<href>{https://qiita.com/YudaiTsukamoto/items/f81a16f55008378ac15c}

本の紹介をやるのであれば、このくらいしっかりと@<b>{僕がえらぶ}という主張に振り切って欲しいと思います。
ひよこエンジニアにおすすめだから、とかに逃げる姿勢がよろしくないわ！

リストの内容の是非はもふちゃんRubyプログラマーではないのでわかりませんが、記事の方向性は好きです。

あと、きちんと本の内容を読んでいるか、記事を読むとわかっちゃうよな…とか思って読んでいました。
Rubyをやるときはこの本のリストを参考にしてみようと思います。

== 技術書のジレンマとPEAKS + 書評ブログを書くTips

リンクをRe:VIEWで貼ろうとしたら本に収まりきらないのでやめました。みんな検索してみて！
とはいえ、じゃあどうやって技術書を読めばいいんだ？というひよこエンジニアの方もいるかもしれません。
このスライドの後半部分には@<code>{書評記事の書き方}の話が出てきます。それがすごく参考になるので、ここで紹介します。

普通は本を読み終わったら書評を書くと思うのですが、このスライドでは@<b>{書評記事の骨組みを先に作成してから}本を読んでいます。
技術同人誌を書くときには「目次ができたら80％完成したも同然」と良く言われます。これと同様に、先にアウトラインを作ってしまってから
そこに当てはまるトピックを探しながら本を読んでいくわけです。

こうすれば、受け身の読書から脱却できますね。書評を書くので、本の内容を噛み砕いて説明する必要もあります。
ただ本の内容を切りはりしただけでは「パクリじゃん！」と言われるので、自分なりに考えたことを整理しなければなりません。
これ、とても知見が深まりますよね。

もふちゃんもこの原稿が終わったら書評ブログを書こうと思います。感想を書いてくれると、作者はとても嬉しいぞ！

== 技術書ランキングサイトをQiita記事を集計して作ったら、2700冊の技術本がいい感じに並んだ

@<href>{https://qiita.com/jabba/items/edefda09121877b79760}

これは異色なもので面白いですね。人のオススメしている本を集計して、自分が本を選ぶときの参考にしよう！というサイトを
作成したよ、というエントリです。

1つ気をつけるべきなのは、母集団がQiitaのユーザーに偏っているよ、という点です。エンジニア全員がQiitaを利用している、と断言することは不可能なので
おすすめな本を挙げている人たちスキル・マインドセット・業界（Web系とかSI系とか組み込み系とかね）は偏っているかもしれません。

これに限らず本を買うときは、基本的に本屋さんで立ち読みをしてから買った方がいいのでは、と思うもふちゃんであります。
人のオススメを参考にするのは良いですが、自分にとってその説明が分かりやすいとは限りません。文体（文章の書き方）にも好みがありますからね。

何冊か立ち読み・比較して「これが読んでみたい！」という本を買ってみるのが良いと思います。
